{"version":3,"sources":["components/Cargar.js","components/Navbar.js","estructuras/Estruturas_Lineales/Cola.js","estructuras/Estruturas_Lineales/ColaPrioridad.js","estructuras/Estructuras_Arboreas/ABB.js","components/Agregar.js","components/Eliminar.js","components/Actualizar.js","components/GraficaListas.js","components/GraficaListaCircular.js","components/GraficoOrdenamientos.js","components/Dibujar.js","components/Buscar.js","estructuras/Ordenamientos/Seleccion.js","estructuras/Ordenamientos/Insercion.js","components/GraficarArbol.js","components/NavbarInter.js","components/Division.js","components/Divisiones.js","App.js","reportWebVitals.js","index.js"],"names":["propsG","Navbar","Menu","className","Item","to","Component","fs","require","Nodo","dato","this","siguiente","Cola","primero","ultimo","longitud","nuevoNodo","estaVacia","eliminado","nodoActual","text","datoAnterior","datoNuevo","nodoanterior","arr","map","e","Agregar","archivoJSON","JSON","stringify","writeFile","datoBuscar","arreglo","contador","id","label","toString","color","prioridad","ColaPrioridad","temp","temp1","console","log","valor","izquierda","derecha","ABB","raiz","add","nodo","buscar","imprimir","eliminar","tmp","maxiz","enlace","nodmax","maxIzq","trasiz","trasder","minder","nodmin","minDer","mandardato","datoborr","datoin","eliminando","insertar","temporal","guardar","archivojs","push","json","vector","graficarNodos","graficarApuntadores","edge","from","onChange","files","target","reader","FileReader","onload","result","trim","data","parse","nombre","datos","edd","cargar","arrString","obtenerNodos","obtenerAputadores","obtenerDatos","structW","valores","readAsText","newarr","charCodeAt","i","length","getCharCodes","s","charCodeArr","Cargar","props","React","useState","open","setOpen","Modal","basic","onClose","onOpen","size","trigger","Header","icon","Icon","name","Content","Input","fluid","type","accept","Actions","Button","inverted","onClick","state","textoDato","swtEdd","obtenerText","setState","value","placeholder","Eliminar","Actualizar","actualizar","GraficaListas","nodosAfuera","Recorrido","uniones","edgefuera","edgeF","graph","nodes","node","index","angle","x","y","edges","options","physics","shape","interaction","navigationButtons","keyboard","height","events","select","event","getNetwork","network","GraficaListaCircular","Math","PI","cos","sin","GraficoOrdenamientos","BarChart","width","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Bar","Number","fill","animationDuration","Dibujar","valorBusqueda","estructura","Buscar","retornarValor","busqueda","Seleccion","menor","posicion","Insercion","aux","GraficarArbol","layout","hierarchical","direction","sortMethod","shadow","font","borderWidth","count","NavbarInter","estrutura","handleItemClick","activeItem","obtenerBusqueda","ordenarDatos","arregloOrdenado","guardarOrdenamiento","location","position","style","colorcard","background","Division","Card","Image","src","imagen","wrapped","ui","title","Description","descripcion","extra","pathname","Divisiones","Group","itemsPerRow","sectionStyle","backgroundImage","App","exact","path","render","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7297163.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\nimport Cola from '../estructuras/Estruturas_Lineales/Cola'\r\nimport ColaPrioridad from '../estructuras/Estruturas_Lineales/ColaPrioridad'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\n\r\nlet propsG\r\nfunction onChange(e){\r\n    let files = e.target.files[0];\r\n    let reader = new FileReader();\r\n    console.log(e.target.files[0])\r\n    reader.onload = (e) => {\r\n        const text = reader.result.toString().trim();\r\n        console.log(text)\r\n        let data = JSON.parse(text); //parseo de archivo JSON\r\n        structW(propsG.nombre, data.valores, propsG.edd) \r\n    }\r\n    reader.readAsText(files);\r\n}\r\nfunction structW(nombre,datos,edd){ // FUNCION PARA SABER QUE TIPO DE ESTRUCTURA ES.\r\n    switch(nombre){\r\n        case \"Pila\" :\r\n            if(edd == null){\r\n                edd = new Cola();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Cola\":\r\n            if(edd == null){\r\n                edd = new Cola();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Cola de prioridad\":\r\n            if(edd == null){\r\n                edd = new ColaPrioridad();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Lista simplemente enlazada\":\r\n\r\n            /* edd = new Cola();\r\n            edd.cargar(datos) */\r\n            break\r\n\r\n        case \"Lista doblemente enlazada\":\r\n\r\n             edd = new Cola();\r\n            edd.cargar(datos) \r\n            break\r\n\r\n        case \"Lista circular simplemente enlazada\":\r\n\r\n            /* edd = new Cola();\r\n            edd.cargar(datos) */\r\n            break\r\n\r\n        case \"Lista circular doblemente enlazada\":\r\n\r\n            edd = new Cola();\r\n            edd.cargar(datos) \r\n            break\r\n        case \"Ordenamiento Selección\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Inserción\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Burbuja\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Rapido\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Arbol ABB\":\r\n\r\n            edd = new ABB();\r\n            edd.cargar(datos)\r\n            console.log(edd.obtenerNodos())\r\n            console.log(edd.obtenerAputadores())\r\n            break\r\n        default:\r\n            break;\r\n    }\r\n    propsG.obtenerDatos(edd);\r\n}\r\n\r\n\r\n\r\nfunction arrString(arreglo){\r\n    let newarr = []\r\n  \r\n    \r\n    if(arreglo[0].charCodeAt){\r\n        for (let i = 0; i < arreglo.length-1; i++) {\r\n          newarr.push(getCharCodes(arreglo[i]))\r\n          \r\n        }\r\n    }else{\r\n      console.log(\"soy un numero\")\r\n      return arreglo\r\n    }\r\n  \r\n    return newarr\r\n  }\r\n  \r\n  function getCharCodes(s){\r\n    let charCodeArr = 0;\r\n    \r\n    for(let i = 0; i < s.length; i++){\r\n        let code = s.charCodeAt(i);\r\n        charCodeArr += code\r\n    }\r\n    \r\n    return charCodeArr;\r\n  }\r\n\r\n\r\nexport default function Cargar(props) {\r\n    propsG = props\r\n    const [open, setOpen] = React.useState(false)\r\n    return (\r\n        <Modal\r\n            className=\"modalcargar\"\r\n            basic\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            size='small'\r\n            trigger={<Menu.Item>Cargar</Menu.Item> }\r\n            >\r\n            <Header icon>\r\n                <Icon name='folder open outline' />\r\n                Cargar\r\n            </Header>\r\n            <Modal.Content>\r\n            </Modal.Content>\r\n                <Input className=\"inputcargar\" fluid type=\"file\" accept=\".json\" onChange={(e) =>  onChange(e)} />\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button className=\"buttoncargar\" color='green' inverted onClick={() =>  setOpen(false)}>\r\n                <Icon name='checkmark' /> Si\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class Navbar extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                    <Menu.Item>\r\n                        <Link to=\"/gitPagueReac/estructura\">TytusDS</Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass Cola {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\r\n    estaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato){\r\n        let nuevoNodo = new Nodo(dato)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\r\n    Pop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\r\n    Imprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        return text\r\n    }\r\n\r\n    \r\n\r\n    actualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\r\n    buscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\r\n    eliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n    \r\n    cargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e)\r\n        })\r\n    }\r\n\r\n    guardar(arr){\r\n        var archivoJSON = JSON.stringify(arr)\r\n\r\n        fs.writeFile(\"Cola.json\", archivoJSON)\r\n    }\r\n\r\n    Recorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\nexport default Cola;","import Cola from './Cola'\r\n\r\nvar fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato, prioridad){\r\n        this.dato = dato\r\n        this.prioridad = prioridad\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass ColaPrioridad {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\r\n    estaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato,prioridad){\r\n        let nuevoNodo = new Nodo(dato,prioridad)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n            // Ordenando cola segun la prioridad\r\n            let temp,nodoActual,temp1\r\n            nodoActual = this.primero\r\n            let siguiente = nodoActual.siguiente\r\n            while(nodoActual.siguiente != null){\r\n            \r\n                if(nodoActual.prioridad > siguiente.prioridad){\r\n                    temp = nodoActual.dato\r\n                    temp1 = nodoActual.prioridad\r\n                    nodoActual.dato = siguiente.dato\r\n                    nodoActual.prioridad = siguiente.prioridad\r\n                    siguiente.dato = temp\r\n                    siguiente.prioridad = temp1\r\n        \r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }else{\r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }\r\n            }\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\r\n    Pop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\r\n    Imprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        console.log(text)\r\n    }\r\n\r\n    actualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\r\n    buscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\r\n    eliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n    \r\n    cargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e.valor,e.prioridad)\r\n        })\r\n    }\r\n\r\n    guardar(arr){\r\n        var archivoJSON = JSON.stringify(arr)\r\n\r\n        fs.writeFile(\"Cola.json\", archivoJSON)\r\n    }\r\n\r\n    Recorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\n\r\nexport default ColaPrioridad;","var fs = require('fs')\r\nclass Nodo{\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.izquierda = null\r\n        this.derecha = null\r\n    }\r\n}\r\nclass ABB{\r\n    constructor(){\r\n        this.raiz = null\r\n    }\r\n\r\n    insertar(dato){\r\n        this.raiz = this.add(dato, this.raiz)\r\n        console.log(\"Inserto un nodo\" )\r\n    }\r\n\r\n    add(dato, nodo){\r\n        if(nodo == null){\r\n            return new Nodo(dato)\r\n        }else{\r\n            if(dato > nodo.dato){\r\n                nodo.derecha =  this.add(dato,nodo.derecha)\r\n            }else{\r\n                nodo.izquierda =  this.add(dato,nodo.izquierda)\r\n            }\r\n        }\r\n        return nodo\r\n    }\r\n\r\n    buscar(dato, nodo){\r\n        if(nodo!= null){\r\n            if(dato == nodo.dato){\r\n                console.log(nodo.dato + \" fue encontrado\")\r\n                return \r\n            }\r\n            this.buscar(dato, nodo.izquierda)\r\n            this.buscar(dato, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    buscando(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        if(dato == this.raiz.dato){\r\n            console.log(this.raiz.dato)\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        this.buscar(dato, nodo)\r\n    }\r\n\r\n    imprimir(nodo){\r\n        if(nodo != null){\r\n            console.log(nodo.dato)\r\n            this.imprimir(nodo.izquierda)\r\n            this.imprimir(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    imprimiendo(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.imprimir(this.raiz)\r\n    }\r\n\r\n    eliminando(dato){\r\n        //Caso1: no existe arbol\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        //asignando valor inicial\r\n        let nodo = this.raiz\r\n        this.eliminar(dato, nodo)\r\n    }\r\n\r\n    eliminar(dato, nodo){\r\n        //Caso2: el dato a buscar se encuentra en la raiz\r\n        if(dato == this.raiz.dato){\r\n            if(nodo.izquierda != null){\r\n                let nodiz = nodo.izquierda\r\n                let maxiz= null\r\n                if(nodiz.derecha != null){\r\n                    maxiz = this.maxIzq(nodo.izquierda)\r\n                }else{\r\n                    maxiz = nodo.izquierda\r\n                    if(nodo.derecha != null){\r\n                        let enlace = nodo.derecha\r\n                        maxiz.derecha = enlace\r\n                        nodo.derecha = null\r\n                    }\r\n                    nodo.izquierda = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmax = new nodo(maxiz)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmax.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmax.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else if(nodo.izquierda == null && nodo.derecha != null){\r\n                let nodiz = nodo.derecha\r\n                let minder= null\r\n                if(nodiz.izquierda != null){\r\n                    minder = this.minDer(nodo.derecha) // minder con valor de dato\r\n                }else{\r\n                    minder = nodo.derecha // miner con valor de nodo\r\n                    if(nodo.izquierda != null){\r\n                        let enlace = nodo.izquierda\r\n                        minder.izquierda = enlace\r\n                        nodo.izquierda = null\r\n                    }\r\n                    this.raiz = nodo.derecha\r\n                    nodo.derecha = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmin = new nodo(minder)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmin.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmin.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                this.raiz = nodmin\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else{\r\n                this.raiz = null\r\n                return\r\n            }\r\n        }\r\n        //Demas Casos: eliminacion dentro del arbol\r\n        if(nodo.izquierda!= null){\r\n            //Dato encontrado a la izquierda\r\n            if(dato == nodo.izquierda.dato){\r\n                let tmp = nodo.izquierda\r\n                //Caso3: Eliminacion de hijo a la izquierda\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.izquierda = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 4: Eliminacion de no hijo a la izquierda\r\n                    if(tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }else if(tmp.izquierda == null && tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.derecha != null){\r\n // Caso 5: Eliminacion de hijo a la derecha\r\n            if(dato == nodo.derecha.dato){\r\n                let tmp = nodo.derecha\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.derecha = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 6: Eliminacion de no hijo a la derecha\r\n                    if(tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                    }else if(tmp.derecha == null && tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.izquierda !=null){\r\n            this.eliminar(dato, nodo.izquierda)\r\n        }\r\n       if(nodo.derecha != null){\r\n            this.eliminar(dato, nodo.derecha)\r\n       }\r\n    }\r\n\r\n    //Metodo de obtencion para maximo valor a la Izquierda\r\n    maxIzq(nodo){\r\n        if (nodo.derecha != null){\r\n            let tmp = nodo.derecha\r\n            if(tmp.derecha !=null){\r\n                this.maxIzq(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                nodo.derecha = null\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo de obtencion para minimo valor a la Derecha\r\n    minDer(nodo){\r\n        if (nodo.izquierda != null){\r\n            let tmp = nodo.izquierda\r\n            if(tmp.izquierda !=null){\r\n                this.minDer(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                nodo.izquierda = null\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    actualizar(datoborr, datoin){\r\n        if(this.raiz==null){\r\n            console.log(\"no existe ningun arbol\")\r\n        }\r\n        this.eliminando(datoborr)\r\n        this.insertar(datoin)\r\n        console.log(\"Actualizado\")  \r\n    }\r\n\r\n    cargar(arreglo) {\r\n        arreglo.map(e => {\r\n            this.insertar(e)\r\n        })\r\n    }\r\n\r\n    guardando(){\r\n        if(this.raiz==null){\r\n            console.log(\"no existe arbol\")\r\n            return\r\n        }\r\n        let temporal = this.raiz;\r\n        this.guardar(temporal)\r\n    }\r\n\r\n    guardar(nodo) {\r\n        let archivojs = [];\r\n        archivojs.push(nodo.dato);\r\n        if(nodo.izquierda!=null){\r\n            this.guardar(nodo.izquierda)\r\n        }\r\n        if(nodo.derecha!=null){\r\n            this.guardar(nodo.derecha)\r\n        }\r\n        let json = JSON.stringify(archivojs)\r\n        let nombre = \"ArbolBinarioBusqueda\";\r\n        fs.writeFile(nombre, json) \r\n    }\r\n\r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.dato, to:nodo.izquierda.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.dato, to:nodo.derecha.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n}\r\n\r\nexport default ABB;\r\n\r\n/* let abb = new ABB()\r\nabb.imprimiendo()\r\nabb.insertar(1)\r\nabb.insertar(2)\r\nabb.insertar(5)\r\nabb.insertar(8)\r\nabb.insertar(9)\r\nabb.insertar(12)\r\nabb.insertar(18)\r\nabb.imprimiendo()\r\nabb.buscando(5)\r\nabb.eliminando(2)\r\nabb.imprimiendo()\r\nabb.eliminando(1)\r\nabb.imprimiendo()\r\nabb.eliminando(18)\r\nabb.imprimiendo()\r\nabb.actualizar(9, 10)\r\nabb.imprimiendo() */\r\n\r\n","\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\nimport './modal.css'\r\nimport React, { Component } from 'react'\r\nimport Cola from '../estructuras/Estruturas_Lineales/Cola'\r\nimport ColaPrioridad from '../estructuras/Estruturas_Lineales/ColaPrioridad'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\n\r\n\r\nexport default class Agregar extends Component {\r\n\r\n    state={\r\n           open: false,\r\n           textoDato: \"\" ,\r\n           prioridad: \"\"\r\n    }\r\n\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        let prioridad = this.state.prioridad\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.cargar(dato)\r\n                break\r\n            case \"Cola\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.Agregar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                if(edd == null){\r\n                    edd = new ColaPrioridad();\r\n                }\r\n                edd.Agregar(dato,prioridad)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n    \r\n                 edd = new Cola();\r\n                edd.cargar(dato) \r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n    \r\n                edd = new Cola();\r\n                edd.cargar(dato) \r\n                break\r\n            case \"Arbol ABB\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ABB();\r\n                }\r\n                edd.insertar(dato) \r\n                console.log(edd.obtenerNodos())\r\n                console.log(edd.obtenerAputadores())\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n       if(this.props.nombre=== \"Cola de prioridad\"){\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                        <br/>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"prioridad\" value={this.state.prioridad}  fluid placeholder=\"agregar prioridad\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n\r\n       }else{\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n       }\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\nimport Cola from '../estructuras/Estruturas_Lineales/Cola'\r\n\r\n\r\n\r\n\r\nexport default class Eliminar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n    \r\n                edd.cargar(dato) \r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n    \r\n                \r\n                break\r\n            case \"Arbol ABB\":\r\n                edd.eliminando(dato);\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n       this.setState({\r\n           [e.target.name]: e.target.value\r\n       })\r\n       }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() => this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Eliminar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='trash' />\r\n                    Eliminar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input type=\"text\" fluid name=\"textoDato\" value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"Eliminanr dato\"/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Yes\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nimport Cola from '../estructuras/Estruturas_Lineales/Cola'\r\n\r\nexport default class Actualizar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        datoAnterior: \"\" ,\r\n        datoNuevo: \"\"\r\n }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let datoAnterior = this.state.datoAnterior\r\n        let datoNuevo = this.state.datoNuevo\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n              //  edd.cargar(dato)\r\n                break\r\n            case \"Cola\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n\r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n\r\n            case \"Lista doblemente enlazada\":\r\n\r\n                /* edd = new Cola();\r\n                edd.cargar(dato)  */\r\n                break\r\n\r\n            case \"Lista circular simplemente enlazada\":\r\n\r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n\r\n            case \"Lista circular doblemente enlazada\":\r\n\r\n               /*  edd = new Cola();\r\n                edd.cargar(dato)  */\r\n                break\r\n            case \"Arbol ABB\":\r\n                console.log(\"actualizando ABB\")\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n obtenerText = e =>{\r\n    this.setState({\r\n        [e.target.name]: e.target.value\r\n    })\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>this.setState({open: false})}\r\n            onOpen={() => this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Actualizar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='edit' />\r\n                Actualizar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" name=\"datoAnterior\" value={this.state.datoAnterior} fluid placeholder=\"Dato Anterior\" onChange={this.obtenerText}/>\r\n                    <br/>\r\n                    <Input type=\"text\" name=\"datoNuevo\" value={this.state.datoNuevo} fluid placeholder=\"Dato Nuevo\" onChange={this.obtenerText}/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.swtEdd}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListas(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let uniones = edgeF()\r\n\r\n\r\n    function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    }\r\n\r\n    console.log(nodosAfuera)\r\n    console.log(uniones)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n          const angle = 2 * (index / arr.length +0.75 );\r\n          node.x = 9000 * angle;\r\n          node.y = 10 * angle;\r\n          if (index % 2 === 0) {\r\n            node.value = index + 1;\r\n          }\r\n          return node;\r\n        }),\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n\r\n\r\n      const diseño = {\r\n          direction: 'LR'\r\n      }\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n          color: \"#21701a\"\r\n        },\r\n        nodes:{\r\n            shape:\"box\"\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListaCircular(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let edgefuera =[]\r\n\r\n    for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n\r\n        if(i == nodosAfuera.length-2){\r\n            let edge = {from:nodosAfuera.length-1, to:0}\r\n            edgefuera[nodosAfuera.length-1] = edge\r\n        }\r\n        \r\n    }\r\n\r\n    if(props.nombre == \"Lista circular doblemente Enlazada\"){\r\n        let contador = nodosAfuera.length\r\n        for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n            let edge = {from:i+1, to:i}\r\n            edgefuera[contador] = edge\r\n            contador++\r\n            if(i == nodosAfuera.length-2){\r\n                let edge = {from:0, to:nodosAfuera.length-1}\r\n                edgefuera[contador] = edge\r\n            }\r\n        }\r\n    }\r\n    console.log(edgefuera)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n            const angle = 2 * Math.PI * (index / arr.length + 0.75);\r\n            node.x = 1000 * Math.cos(angle);\r\n            node.y = 1000 * Math.sin(angle);\r\n            if (index % 2 === 0) {\r\n              node.value = index + 1;\r\n            }\r\n            return node;\r\n        }),\r\n\r\n        edges: edgefuera\r\n      };\r\n     \r\n\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n          color: \"#21701a\"\r\n        },\r\n        nodes:{\r\n            shape:\"box\"\r\n        },\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend\r\n  } from \"recharts\";\r\n\r\nimport './GraficoOrdenamiento.css'\r\n\r\n\r\n\r\n  let data;\r\n\r\n\r\nlet duration = 10000; \r\n\r\n\r\nexport default function GraficoOrdenamientos(props) {\r\n    \r\n  data = props.arreglo\r\n\r\n    return (\r\n        <div className=\"grafico\">\r\n        \r\n        <BarChart\r\n          width={1000}\r\n          height={600}\r\n          data={data} \r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5\r\n          }}\r\n          \r\n        >\r\n         \r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Bar dataKey={Number} fill=\"#8884d8\" animationDuration={duration}/>\r\n        </BarChart>\r\n    \r\n        \r\n        </div>\r\n      );\r\n}\r\n","import React, { Component } from 'react'\r\nimport GraficaListas from './GraficaListas'\r\nimport GraficaListaCircular from './GraficaListaCircular'\r\nimport GraficoOrdenamientos from './GraficoOrdenamientos'\r\n\r\nexport default class Dibujar extends Component {\r\n  render() {\r\n     if(this.props.nombre == \"Lista circular simplemente enlazada\" || this.props.nombre == \"Lista circular doblemente enlazada\"){\r\n      return (\r\n        <div>\r\n            <GraficaListaCircular nombre={this.props.nombre} buscar={this.props.valorBusqueda} edd={this.props.estructura}/>\r\n        </div>\r\n      )\r\n    \r\n    }else if(this.props.nombre == \"Ordenamiento Selección\" ||\r\n    this.props.nombre == \"Ordenamiento Inserción\" ||\r\n    this.props.nombre == \"Ordenamiento Burbuja\" ||\r\n    this.props.nombre == \"Ordenamiento Rapido\"){\r\n      return(\r\n        <div>\r\n        <br/>\r\n        <GraficoOrdenamientos arreglo={this.props.estructura}/> \r\n        </div>\r\n      ) \r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n             <GraficaListas nombre={this.props.nombre}  buscar={this.props.valorBusqueda} edd={this.props.estructura}/> \r\n        </div>\r\n      )\r\n    } \r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nexport default class Buscar extends Component {\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    retornarValor = () =>{\r\n        this.props.busqueda(this.state.textoDato)\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>  this.setState({open: false})}\r\n            onOpen={() =>  this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Buscar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Buscar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" fluid name='textoDato' value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"buscar dato\" icon=\"search\"/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.retornarValor}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","export default function Seleccion(arr){\r\n    \r\n    let menor, posicion, tmp\r\n    for (let index = 0; index < arr.length-1; index++) {\r\n        menor = arr[index]\r\n         posicion = index;\r\n        for (let y = index+1; y < arr.length; y++) {\r\n            \r\n            if(arr[y] < menor){\r\n                menor = arr[y]\r\n                posicion = y\r\n            }\r\n            \r\n        }\r\n  \r\n        if(posicion != index){\r\n            tmp = arr[index]\r\n            arr[index] = arr[posicion];\r\n            arr[posicion] = tmp;\r\n        }\r\n  \r\n    }\r\n    \r\n    return arr\r\n  }","export default function Insercion(arr){\r\n    let derecha, aux\r\n    for (let x = 0; x < arr.length; x++) {\r\n        derecha = x\r\n        aux = arr[x]\r\n        while((derecha>0) && (arr[derecha-1] > aux)){\r\n            arr[derecha] = arr[derecha-1]\r\n            derecha--\r\n        }\r\n\r\n        arr[derecha] = aux\r\n    }\r\n\r\n    return arr\r\n}","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficarArbol(props) {\r\n\r\n    let nodosAfuera = props.estructura.obtenerNodos()\r\n\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.estructura.obtenerNodos(props.valorBusqueda)\r\n    }\r\n\r\n    let uniones =  props.estructura.obtenerAputadores()\r\n\r\n  /*   function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    } */\r\n\r\n    /* console.log(nodosAfuera)\r\n    console.log(uniones) */\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera,\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n      const options = {\r\n        layout: {\r\n            hierarchical: {\r\n              direction: \"UD\",\r\n              sortMethod: \"directed\",\r\n            },\r\n        },\r\n        physics: false,\r\n        edges: {\r\n          color: \"white\",\r\n          width: 2,\r\n          shadow: true\r\n        },\r\n        nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport Cargar from './Cargar'\r\nimport Agregar from './Agregar'\r\nimport Eliminar from './Eliminar'\r\nimport Actualizar from './Actualizar'\r\nimport {Link} from 'react-router-dom'\r\nimport Dibujar from './Dibujar';\r\nimport Buscar from './Buscar'\r\n\r\nimport Seleccion from '../estructuras/Ordenamientos/Seleccion'\r\nimport Insercion from '../estructuras/Ordenamientos/Insercion'\r\nimport Grafica from './GraficaListas'\r\nimport GraficarArbol from './GraficarArbol'\r\nlet count = 0;\r\nexport default class NavbarInter extends Component {\r\n    state = {\r\n      estrutura : null,\r\n      busqueda: \"\",\r\n      nombre: ''\r\n     }\r\n\r\n\r\n     componentDidMount(){\r\n       this.setState({nombre: this.props.location.state.nombre})\r\n     }\r\n    \r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n     \r\n    obtenerDatos = (edd) =>{\r\n      this.setState({\r\n        estrutura: edd\r\n      })\r\n    }\r\n\r\n    obtenerBusqueda = (datoBuscar) =>{\r\n      this.setState({\r\n        busqueda: datoBuscar\r\n      })\r\n    }\r\n\r\n\r\n    ordenarDatos=()=>{\r\n      let arregloOrdenado = []\r\n        switch (this.state.nombre) {\r\n          case \"Ordenamiento Selección\":\r\n            arregloOrdenado = Seleccion(this.state.estrutura);\r\n            console.log(\"estoy ordenando Seleccion\")\r\n            break;\r\n          \r\n          case \"Ordenamiento Inserción\":\r\n            arregloOrdenado = Insercion(this.state.estrutura);\r\n            \r\n            console.log(\"estoy ordenando Insercion\")\r\n            break;\r\n          case \"Ordenamiento Burbuja\":\r\n            \r\n            console.log(\"estoy ordenando Burbuja\")\r\n            break;\r\n          case \"Ordenamiento Rapido\":\r\n            \r\n            console.log(\"estoy ordenando Rapido\")\r\n            break;\r\n          default:\r\n            break;\r\n          \r\n        }\r\n\r\n        this.setState({\r\n          estrutura: arregloOrdenado\r\n        })\r\n    }\r\n\r\n\r\n   guardarOrdenamiento=() =>{\r\n      let archivoJSON = JSON.stringify(this.state.estrutura)\r\n\r\n  }\r\n\r\n    render() {\r\n      const { activeItem } = this.state\r\n  \r\n      if(this.state.estrutura == null){\r\n        return (\r\n          <div>\r\n              <Menu className=\"ui tpo inverted attached menu\">\r\n                <Menu.Item>\r\n                            <Link to=\"/gitPagueReac/\">TytusDS</Link>\r\n                </Menu.Item>\r\n                <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Buscar  busqueda={this.obtenerBusqueda}  key={count++}/>\r\n              <Menu.Menu position='right'>\r\n                <Menu.Item name=\"Guardar\" icon='save'>\r\n                </Menu.Item>\r\n                \r\n              </Menu.Menu>\r\n            </Menu>\r\n            <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n            \r\n          </div>\r\n        )\r\n      }else{\r\n        if(this.state.nombre == \"Ordenamiento Selección\" ||\r\n           this.state.nombre == \"Ordenamiento Inserción\" ||\r\n           this.state.nombre == \"Ordenamiento Burbuja\" ||\r\n           this.state.nombre == \"Ordenamiento Rapido\" ){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/gitPagueReac/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Menu.Item name=\"Ordenar\" icon='chart bar' \r\n                    onClick={this.handleItemClick, this.ordenarDatos}>\r\n                  </Menu.Item>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save' onClick={this.handleItemClick, this.guardarOrdenamiento}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura}  key={count++}/>\r\n            </div>\r\n          )\r\n        }else if(this.state.nombre == \"Arbol ABB\"){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/gitPagueReac/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n               <GraficarArbol nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }else{\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/gitPagueReac/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nvar colorcard ={\r\n    background: \"rgba(0, 0, 0, 0.1)\"\r\n}\r\n\r\n\r\nexport default class Division extends Component {\r\n\r\n   \r\n    render() {\r\n        return (\r\n                 <Card color = {this.props.color} style={colorcard}>\r\n                    <Image src={this.props.imagen} wrapped ui={false} />\r\n                    <Card.Content>\r\n                    <Card.Header style={{ color: 'white' }}>{this.props.title}</Card.Header>\r\n                    <Card.Description style={{ color: 'white' }}>\r\n                        {this.props.descripcion}\r\n                    </Card.Description>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                    <a>\r\n                        <Icon className='angle double right icon' style={{ color: 'white' }}>\r\n                            <Link style={{ color: 'white' }} to={{pathname:\"/gitPagueReac/estructura\", state:{nombre: this.props.title}}}>IR</Link>\r\n                         </Icon>\r\n                    </a>\r\n                    </Card.Content>\r\n                </Card>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card } from 'semantic-ui-react'\r\nimport Division from './Division'\r\nimport './Divisiones.css'\r\n\r\n\r\nexport default class Divisiones extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"divisiones\"> \r\n            <div className=\"one\">\r\n                <h1 style={{ color: 'white' }}>TytusDS</h1>\r\n            </div>\r\n            \r\n            <br/>\r\n            <br/>\r\n            <Card.Group itemsPerRow={4} >\r\n                    <Division title=\"Ordenamiento Burbuja\" descripcion=\"this a description\" color='red' imagen=\"https://upload.wikimedia.org/wikipedia/commons/e/ef/Sorting_shaker_sort_anim.gif\"/>\r\n                    <Division title=\"Ordenamiento Selección\" descripcion=\"this a description\" color='green' imagen=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Smoothsort.gif\"/>\r\n                    <Division title=\"Ordenamiento Inserción\" descripcion=\"this a description\" color='yellow' imagen=\"https://thumbs.gfycat.com/DazzlingGracefulAngelfish-size_restricted.gif\"/>\r\n                    <Division title=\"Ordenamiento Rapido\" descripcion=\"this a description\" color='blue' imagen=\"https://media.geeksforgeeks.org/wp-content/uploads/20190705180519/quicksort.gif\"/>\r\n                   \r\n                    <Division title=\"Lista simplemente enlazada\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/A-1.gif\"/>\r\n                    <Division title=\"Lista doblemente enlazada\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/A-2.gif\"/>\r\n                    <Division title=\"Lista circular simplemente enlazada\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/A-4.gif\"/>\r\n                    <Division title=\"Lista circular doblemente enlazada\" descripcion=\"this a description\" color='violet' imagen=\"https://s6.gifyu.com/images/A-3.gif\"/>\r\n\r\n                    <Division title=\"Pila\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/Pila.gif\"/>\r\n                    <Division title=\"Cola\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/Cola.gif\"/>\r\n                    <Division title=\"Cola de prioridad\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/Cola-de-Prioridad.gif\"/>\r\n\r\n\r\n                    <Division title=\"Arbol ABB\" descripcion=\"this a description\" color='yellow'/>\r\n                    <Division title=\"arbol 2\" descripcion=\"this a description\"/>\r\n                    <Division title=\"arbol 3\" descripcion=\"this a description\"/>\r\n                    <Division title=\"arbol 4\" descripcion=\"this a description\"/>\r\n                    <Division title=\"arobl 5\" descripcion=\"this a description\"/>\r\n            </Card.Group>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","\n\nimport React from 'react'\nimport './App.css';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\nimport Navbar from './components/Navbar';\nimport NavbarInter from './components/NavbarInter';\nimport Divisiones from './components/Divisiones';\nvar sectionStyle = {\n  backgroundImage: \"url(\" +  \"https://res.cloudinary.com/practicaldev/image/fetch/s--AILWL9dz--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/6vnsxy7g486k12yp4bhd.jpg\"  + \")\"\n};\nfunction App() {\n  return (\n    <div className=\"App\" style={sectionStyle}>\n      <Router>\n      <Route exact path=\"/gitPagueReac/\" render={() =>{\n        return <div> \n          <Navbar/>\n          <Divisiones/>\n        </div>\n      }}>\n        </Route>\n\n        <Route exact path=\"/gitPagueReac/estructura\" component={NavbarInter}/>\n      </Router>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}